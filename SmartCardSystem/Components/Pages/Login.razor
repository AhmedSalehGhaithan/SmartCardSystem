@page "/login"
@rendermode InteractiveServer
<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <h2>Login</h2>
            <EditForm  Model="@login" OnValidSubmit="LoginClicked">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label class="form-label">Email Address</label>
                    <InputText @bind-Value="login.Email" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <label class="form-label">Password </label>
                    <InputText @bind-Value="login.Password" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <button class="btn btn-primary" type="submit">Login</button>
                </div>
                <ValidationSummary/>
            </EditForm>
        </div>
    </div>
</div>

@code {
    public LoginDTO login = new();
    async Task LoginClicked()
    {
        LoginResponse response = await _service.LoginAsync(login);

        if (!response.Flag)
        {
            await _js.InvokeVoidAsync("alert", response.Message);
            return;
        }
        var customAuthStateProvider = (CustomAuthenticationStateProvider)_authStateProvider;
        customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);
        _navManager.NavigateTo("/", forceLoad: true);
    }

}
